{"version":3,"sources":["vg.jpg","lovers.png","sonofman.png","waves.jpg","dali.jpg","girl.jpg","ImageBar.tsx","setup.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","ImageBar","props","images","onClick","handleClick","id","className","map","obj","index","key","file","src","camera","scene","renderer","geometry","points","material","glsl","x","toString","vertexShader","fragmentShader","init","loadImages","a","paths","whenLoaded","Promise","res","rej","imgs","forEach","path","img","Image","onload","push","length","THREE","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","setClearColor","container","document","getElementById","appendChild","domElement","innerHeight","position","set","OrbitControls","vg","girl","sonofman","waves","lovers","dali","imagesObj","Array","fill","undefined","n","canvas","createElement","ctx","getContext","loadedImages","element","match","width","naturalWidth","height","naturalHeight","drawImage","imgData","getImageData","data","rgb","color","i","setRGB","clone","w","h","coordinates","Float32Array","tmp1","s","l","tmp2","sort","b","getHSL","t","e","Math","floor","image","texture","load","positions","k","j","setAttribute","item","flipY","uniforms","sourceTex","value","targetTex","size","blend","dimensions","add","resize","aspect","updateProjectionMatrix","animate","requestAnimationFrame","render","launch","App","useState","setImages","source","setSource","target","setTarget","setPoints","isAnimating","setIsAnimating","useEffect","getData","tl","TimelineMax","paused","eventCallback","to","ease","Power2","easeOut","play","startAnimation","Boolean","location","hostname","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1d2a94f3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/vg.bd97b8cf.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lovers.f0e66115.png\";","module.exports = __webpack_public_path__ + \"static/media/sonofman.8274ca14.png\";","module.exports = __webpack_public_path__ + \"static/media/waves.dd06de76.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dali.401160e8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/girl.f09750e2.jpg\";","import React from 'react';\nimport './ImageBar.style.css';\n\nexport default function ImageBar(props: any) {\n    const { images, onClick } = props;\n    const handleClick = (id: number) => {\n        onClick(id);\n    };\n    return (\n        <div className={'container'}>\n            {images.map((obj: any, index: number) => {\n                return (\n                    <img\n                        key={obj.file}\n                        onClick={() => handleClick(index)}\n                        className={'item'}\n                        src={obj.file}\n                    ></img>\n                );\n            })}\n        </div>\n    );\n}\n","import * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport vg from './vg.jpg';\nimport lovers from './lovers.png';\nimport sonofman from './sonofman.png';\nimport waves from './waves.jpg';\nimport dali from './dali.jpg';\nimport girl from './girl.jpg';\nimport { HSL } from 'three';\n\nconst glsl = (x: TemplateStringsArray): string => x.toString();\n\nconst vertexShader = glsl`\n    precision highp float;\n\n    attribute vec3 position;\n    attribute vec2 source;\n    attribute vec2 target;\n\n    uniform sampler2D sourceTex;\n    uniform sampler2D targetTex;\n\n    uniform mat4 modelViewMatrix;\n    uniform mat4 projectionMatrix;\n\n    uniform float size;\n    uniform float blend;\n    uniform vec2 dimensions;\n\n    varying vec3 vColor;\n    const float PI = 3.14159265359;\n\n\n    void main() {\n        float pBlend = 0.;\n\t\tfloat threshold = ( position.y * dimensions.x + position.x) * .5 / ( dimensions.x * dimensions.y );\n\t\tif( 1.5 * blend > threshold ) {\n\t\t\tpBlend = 1.5 * blend - threshold;\n        }\n        pBlend = clamp(pBlend, 0.,1.);\n\n        vec3 origin = vec3(source, 0.);\n        vec3 destination = vec3(target, 0.);\n        vec3 p = mix(origin, destination, pBlend);\n\n        float l = length(destination - origin);\n\n        vec2 uvS = source / dimensions.x;\n        vec2 uvT = target / dimensions.x;\n\n        vec3 d = destination - origin;\n\t\tvec3 c = origin + d / 2.;\n\t\tp.xy = c.xy - .5 * d.xy * cos(pBlend*PI);\n\n        p.z = 0.2 * l * sin(PI*pBlend);\n\n        vColor = mix(texture2D(sourceTex, uvS).rgb, texture2D(targetTex, uvT).rgb, pBlend);\n        p.xy -= 0.5 * dimensions; \n        p *= 1. / dimensions.x;\n        p.y *= - 1.;\n\n        vec4 mvPosition = modelViewMatrix * vec4(p, 1.);\n        gl_PointSize = size * ( 2. / - mvPosition.z );\n        gl_Position = projectionMatrix * mvPosition;\n    }\n`;\n\nconst fragmentShader = glsl`\n    precision highp float;\n\n    varying vec3 vColor;\n\n    void main() {\n        gl_FragColor = vec4(vColor, 1.);\n    }\n`;\n\nlet camera: THREE.PerspectiveCamera,\n    controls,\n    scene: THREE.Scene,\n    renderer: THREE.WebGLRenderer,\n    geometry: THREE.BufferGeometry,\n    points: THREE.Points,\n    material: any;\n\nasync function init() {\n    scene = new THREE.Scene();\n\n    renderer = new THREE.WebGLRenderer();\n\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(window.innerWidth, window.innerWidth);\n    renderer.setClearColor(new THREE.Color(0x2a251f));\n\n    var container = document.getElementById('app');\n    container?.appendChild(renderer.domElement);\n\n    camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.001, 100);\n    camera.position.set(0, 0, 1);\n\n    controls = new OrbitControls(camera, renderer.domElement);\n\n    function loadImages(\n        paths: any[],\n        whenLoaded: { (loadedImages: any): void; (arg0: any[]): void }\n    ) {\n        return new Promise((res, rej) => {\n            var imgs: HTMLImageElement[] = [];\n            paths.forEach(function (path: string) {\n                var img = new Image();\n                img.onload = function () {\n                    imgs.push(img);\n                    if (imgs.length === paths.length) {\n                        whenLoaded(imgs);\n                        res();\n                    }\n                };\n                img.src = path;\n            });\n        });\n    }\n\n    let images = [vg, girl, sonofman, waves, lovers, dali];\n\n    let imagesObj: any = new Array(images.length).fill(undefined).map((n) => ({}));\n\n    let canvas = document.createElement('canvas');\n    let ctx = canvas.getContext('2d');\n\n    await loadImages(images, (loadedImages: HTMLImageElement[]) => {\n        imagesObj.forEach((element: any, index: number) => {\n            debugger;\n            // @ts-ignore\n            element.file = loadedImages[index].src.match(/\\/static.*(jpg|png)/gi)[0];\n            const img = loadedImages[index];\n\n            canvas.width = img.naturalWidth;\n            canvas.height = img.naturalHeight;\n\n            ctx = ctx as CanvasRenderingContext2D;\n            ctx.drawImage(img, 0, 0);\n\n            const imgData = ctx.getImageData(0, 0, canvas.width, canvas.height).data;\n\n            let rgb: Array<{ color: THREE.Color; index: number }> = [];\n            let color = new THREE.Color();\n\n            for (let i = 0; i < imgData.length; i += 4) {\n                color = color.setRGB(imgData[i], imgData[i + 1], imgData[i + 2]);\n                rgb.push({ color: color.clone(), index: i / 4 });\n            }\n\n            const w = img.width;\n            const h = img.height;\n            const coordinates = new Float32Array(w * h * 2);\n\n            let tmp1: HSL = { h: 0, s: 0, l: 0 };\n            let tmp2: HSL = { h: 0, s: 0, l: 0 };\n            rgb.sort((a, b) => {\n                a.color.getHSL(tmp1);\n                b.color.getHSL(tmp2);\n                return tmp1.s - tmp2.s;\n            });\n            let t = 0;\n            rgb.forEach((e) => {\n                coordinates[t] = e.index % w;\n                coordinates[t + 1] = Math.floor(e.index / h);\n                t += 2;\n            });\n\n            element.image = img;\n            element.rgb = rgb;\n            element.texture = new THREE.TextureLoader().load(element.file);\n            element.coordinates = coordinates;\n        });\n    });\n\n    const w = imagesObj[0].image.width;\n    const h = imagesObj[0].image.height;\n    let positions = new Float32Array(w * h * 3);\n    let k = 0;\n    for (let i = 0; i < w; i++) {\n        for (let j = 0; j < h; j++) {\n            positions[k * 3] = j;\n            positions[k * 3 + 1] = i;\n            positions[k * 3 + 2] = 0;\n            k++;\n        }\n    }\n\n    geometry = new THREE.BufferGeometry();\n\n    geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n    geometry.setAttribute('source', new THREE.BufferAttribute(imagesObj[0].coordinates, 2));\n    geometry.setAttribute('target', new THREE.BufferAttribute(imagesObj[1].coordinates, 2));\n\n    imagesObj.forEach((item: any) => {\n        item.texture.flipY = false;\n    });\n\n    material = new THREE.RawShaderMaterial({\n        uniforms: {\n            sourceTex: { value: imagesObj[0].texture },\n            targetTex: { value: imagesObj[1].texture },\n            size: { value: window.devicePixelRatio },\n            blend: { value: 0 },\n            dimensions: {\n                value: new THREE.Vector2(imagesObj[0].image.width, imagesObj[0].image.height),\n            },\n        },\n        vertexShader,\n        fragmentShader,\n    });\n\n    points = new THREE.Points(geometry, material);\n\n    scene.add(points);\n\n    resize();\n\n    return imagesObj;\n}\n\nfunction resize() {\n    var w = window.innerWidth;\n    var h = window.innerHeight;\n    renderer.setSize(w, h);\n    camera.aspect = w / h;\n    camera.updateProjectionMatrix();\n}\n\nfunction animate() {\n    requestAnimationFrame(animate);\n    render();\n}\n\nfunction render() {\n    renderer.render(scene, camera);\n}\n\nexport async function launch() {\n    const images = await init();\n    animate();\n    return { images, points };\n}\n","import React, { useEffect, useState } from 'react';\nimport * as THREE from 'three';\nimport './App.css';\nimport './canvas.style.css';\nimport ImageBar from './ImageBar';\nimport { launch } from './setup';\nimport { TimelineMax, Power2 } from 'gsap';\n\nfunction App() {\n    const [imagesObj, setImages] = useState<any[]>([]);\n    const [source, setSource] = useState(0);\n    const [target, setTarget] = useState(0);\n    const [points, setPoints] = useState<THREE.Points | null>(null);\n    const [isAnimating, setIsAnimating] = useState(false);\n\n    useEffect(() => {\n        async function getData() {\n            const { images, points } = await launch();\n            setImages(images);\n            setPoints(points);\n        }\n        getData();\n    }, []);\n\n    // @ts-ignore\n    const startAnimation = (material, geometry) => {\n        setIsAnimating(true);\n        material.uniforms.blend.value = 0;\n        material.uniforms.sourceTex.value = imagesObj[source].texture;\n        geometry.setAttribute(\n            'source',\n            new THREE.Float32BufferAttribute(imagesObj[source].coordinates, 2)\n        );\n        material.uniforms.targetTex.value = imagesObj[target].texture;\n        geometry.setAttribute(\n            'target',\n            new THREE.Float32BufferAttribute(imagesObj[target].coordinates, 2)\n        );\n\n        let tl = new TimelineMax({ paused: true });\n        tl.eventCallback('onComplete', () => {\n            setIsAnimating(false);\n            setSource(target);\n        });\n        tl.to(\n            material.uniforms.blend,\n            4,\n            {\n                value: 1,\n                ease: Power2.easeOut,\n            },\n            0\n        );\n        tl.play();\n    };\n\n    const handleClick = (id: number) => {\n        if (isAnimating) return;\n        setTarget(id);\n    };\n\n    useEffect(() => {\n        if (source === target) return;\n        startAnimation(points?.material, points?.geometry);\n    }, [target, points]);\n\n    return (\n        <div className='App' id='app'>\n            <ImageBar images={imagesObj} onClick={handleClick}></ImageBar>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}